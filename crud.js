var userForm = document.getElementById('userForm');
var userDetailsDiv = document.getElementById('userDetails');
var editButton = document.getElementById('editButton');
var userToEdit = null; // Reference to the user being edited

// Function to store data in local storage
function storeDataLocally(user) {
  localStorage.setItem('userData', JSON.stringify(user));
}

// Function to retrieve data from local storage
function getStoredData() {
  var storedData = localStorage.getItem('userData');
  return storedData ? JSON.parse(storedData) : null;
}

// On page load, check if there's data in local storage
var storedUser = getStoredData();
if (storedUser) {
  userDetailsDiv.innerHTML += `
    <div class="user" data-user-id="${storedUser._id}">
      <h2>User Details:</h2>
      <p>Name: <span class="name">${storedUser.name}</span></p>
      <p>Email: <span class="email">${storedUser.email}</span></p>
      <p>Phone: <span class="phone">${storedUser.phone}</span></p>
      <br/>
      <span>
        <button class="delete">Delete</button>
        <button class="edit">Edit</button>
      </span>
    </div>
  `;
}

userForm.addEventListener('submit', function(e) {
  e.preventDefault();

  // Get form values
  var name = document.getElementById('name').value;
  var email = document.getElementById('email').value;
  var phone = document.getElementById('phone').value;

  if (userToEdit) {
    // Update existing user details
    userToEdit.querySelector('.name').textContent = name;
    userToEdit.querySelector('.email').textContent = email;
    userToEdit.querySelector('.phone').textContent = phone;

    userToEdit = null;
    editButton.style.display = 'none';
  } else {
    // Create user object
    var user = {
      name: name,
      email: email,
      phone: phone
    };

    // Use the CRUD storage API to store the data
    axios.post("https://crudcrud.com/api/a2aa9fce68b84877a0ff82c37c711626/appointmentdata", user)
      .then((response) => {
        // The response will contain the unique ID generated by the fake API
        console.log("User data stored. ID: " + response.data._id);
        user._id = response.data._id;
        storeDataLocally(user); // Store the data in local storage
      })
      .catch((err) => {
        console.log(err);
      });
  }

  // Display user details on the screen
  userDetailsDiv.innerHTML += `
    <div class="user" data-user-id="${user._id}">
      <h2>User Details:</h2>
      <p>Name: <span class="name">${name}</span></p>
      <p>Email: <span class="email">${email}</span></p>
      <p>Phone: <span class="phone">${phone}</span></p>
      <br/>
      <span>
        <button class="delete">Delete</button>
        <button class="edit">Edit</button>
      </span>
    </div>
  `;

  // Reset the form
  userForm.reset();
});

// Add event listener for handling delete button clicks
userDetailsDiv.addEventListener('click', function(e) {
  if (e.target.classList.contains('delete')) {
    var userDiv = e.target.parentNode.parentNode;
    var userId = userDiv.dataset.userId; // Assuming you set a "data-user-id" attribute to identify the user

    // Use the CRUD storage API to delete the data
    axios.delete(`https://crudcrud.com/api/a2aa9fce68b84877a0ff82c37c711626/appointmentdata/${userId}`)
      .then((response) => {
        console.log("User data deleted:", userId);
      })
      .catch((err) => {
        console.log(err);
      });

    // Remove the user details element from the website
    userDiv.remove();
  }

  if (e.target.classList.contains('edit')) {
    var userDiv = e.target.parentNode.parentNode;
    var name = userDiv.querySelector('.name').textContent;
    var email = userDiv.querySelector('.email').textContent;
    var phone = userDiv.querySelector('.phone').textContent;

    // Populate the form with the existing values
    document.getElementById('name').value = name;
    document.getElementById('email').value = email;
    document.getElementById('phone').value = phone;

    userToEdit = userDiv;
    editButton.style.display = 'inline-block';
  }
});
